
Harkka8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000757  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065d  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000255  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
	if (number_of_elements < 9){
		Buffer[write_index++] = UDR0;
		number_of_elements++;
	}
	
}
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <USART_Init+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	85 ec       	ldi	r24, 0xC5	; 197
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 81       	ldd	r18, Y+1	; 0x01
  a4:	3a 81       	ldd	r19, Y+2	; 0x02
  a6:	23 2f       	mov	r18, r19
  a8:	33 27       	eor	r19, r19
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
  ae:	84 ec       	ldi	r24, 0xC4	; 196
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	29 81       	ldd	r18, Y+1	; 0x01
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
  b8:	81 ec       	ldi	r24, 0xC1	; 193
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	20 e1       	ldi	r18, 0x10	; 16
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
  c2:	82 ec       	ldi	r24, 0xC2	; 194
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	26 e0       	ldi	r18, 0x06	; 6
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
  cc:	00 00       	nop
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <main>:

int main(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	
	USART_Init(MYUBRR);
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	
	while (1)
	{
		// Writing data to buffer
		if (number_of_elements < 9){
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <number_of_elements>
  ec:	89 30       	cpi	r24, 0x09	; 9
  ee:	98 f4       	brcc	.+38     	; 0x116 <main+0x3e>
			Buffer[write_index++] = storedata;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	98 0f       	add	r25, r24
  f8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <storedata>
 104:	8b 5f       	subi	r24, 0xFB	; 251
 106:	9e 4f       	sbci	r25, 0xFE	; 254
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
			number_of_elements++;	
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <number_of_elements>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <number_of_elements>
		}
		
		//Reading data from the buffer
		if(number_of_elements>0){
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <number_of_elements>
 11a:	88 23       	and	r24, r24
 11c:	29 f3       	breq	.-54     	; 0xe8 <main+0x10>
			readdata = Buffer[read_index++];
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <read_index>
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	98 0f       	add	r25, r24
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <read_index>
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	8b 5f       	subi	r24, 0xFB	; 251
 130:	9e 4f       	sbci	r25, 0xFE	; 254
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readdata>
			number_of_elements--;
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <number_of_elements>
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <number_of_elements>
		}
	}
 144:	d1 cf       	rjmp	.-94     	; 0xe8 <main+0x10>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
