
Harkka11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004d8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8e:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_3>:


volatile uint8_t system_active = 1; // initialize the system as active

ISR(PCINT0_vect) // handle the start-button interrupt
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	if (PINB & (1 << PINB0)) // check if the start-button is pressed
  b2:	83 e2       	ldi	r24, 0x23	; 35
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	80 81       	ld	r24, Z
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	99 27       	eor	r25, r25
  c2:	89 2b       	or	r24, r25
  c4:	19 f0       	breq	.+6      	; 0xcc <__vector_3+0x36>
	{
		system_active = 1; // set the system as active
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  cc:	00 00       	nop
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <main>:

int main(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	2e 97       	sbiw	r28, 0x0e	; 14
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << DDB5); // set PB5 as output (LED)
  fa:	84 e2       	ldi	r24, 0x24	; 36
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	24 e2       	ldi	r18, 0x24	; 36
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	20 62       	ori	r18, 0x20	; 32
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	DDRB &= ~(1 << DDB4); // set PB4 as input (stop-button)
 10c:	84 e2       	ldi	r24, 0x24	; 36
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	24 e2       	ldi	r18, 0x24	; 36
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	2f 7e       	andi	r18, 0xEF	; 239
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
	PORTB |= (1 << PINB4); // enable the pull-up resistor for PB4
 11e:	85 e2       	ldi	r24, 0x25	; 37
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	25 e2       	ldi	r18, 0x25	; 37
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	20 81       	ld	r18, Z
 12a:	20 61       	ori	r18, 0x10	; 16
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18

	PCICR |= (1 << PCIE0); // enable pin change interrupt 0
 130:	88 e6       	ldi	r24, 0x68	; 104
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	28 e6       	ldi	r18, 0x68	; 104
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	21 60       	ori	r18, 0x01	; 1
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	PCMSK0 |= (1 << PCINT0); // enable pin change interrupt for PB0
 142:	8b e6       	ldi	r24, 0x6B	; 107
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	2b e6       	ldi	r18, 0x6B	; 107
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	21 60       	ori	r18, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18

	sei(); // enable global interrupts
 154:	78 94       	sei

	while (1)
	{
		if (system_active) // check if the system is active
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	88 23       	and	r24, r24
 15c:	09 f4       	brne	.+2      	; 0x160 <main+0x7a>
 15e:	7d c0       	rjmp	.+250    	; 0x25a <main+0x174>
		{
			
			PORTB ^= (1 << PINB5); // toggle the LED state
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	25 e2       	ldi	r18, 0x25	; 37
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	30 81       	ld	r19, Z
 16c:	20 e2       	ldi	r18, 0x20	; 32
 16e:	23 27       	eor	r18, r19
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	a8 e4       	ldi	r26, 0x48	; 72
 17a:	b2 e4       	ldi	r27, 0x42	; 66
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	ab 83       	std	Y+3, r26	; 0x03
 182:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	4a e7       	ldi	r20, 0x7A	; 122
 18a:	55 e4       	ldi	r21, 0x45	; 69
 18c:	69 81       	ldd	r22, Y+1	; 0x01
 18e:	7a 81       	ldd	r23, Y+2	; 0x02
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	9c 81       	ldd	r25, Y+4	; 0x04
 194:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__mulsf3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	af 83       	std	Y+7, r26	; 0x07
 1a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e8       	ldi	r20, 0x80	; 128
 1aa:	5f e3       	ldi	r21, 0x3F	; 63
 1ac:	6d 81       	ldd	r22, Y+5	; 0x05
 1ae:	7e 81       	ldd	r23, Y+6	; 0x06
 1b0:	8f 81       	ldd	r24, Y+7	; 0x07
 1b2:	98 85       	ldd	r25, Y+8	; 0x08
 1b4:	0e 94 4f 01 	call	0x29e	; 0x29e <__cmpsf2>
 1b8:	88 23       	and	r24, r24
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <main+0xe0>
		__ticks = 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9a 87       	std	Y+10, r25	; 0x0a
 1c2:	89 87       	std	Y+9, r24	; 0x09
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <main+0x15e>
	else if (__tmp > 65535)
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	3f ef       	ldi	r19, 0xFF	; 255
 1ca:	4f e7       	ldi	r20, 0x7F	; 127
 1cc:	57 e4       	ldi	r21, 0x47	; 71
 1ce:	6d 81       	ldd	r22, Y+5	; 0x05
 1d0:	7e 81       	ldd	r23, Y+6	; 0x06
 1d2:	8f 81       	ldd	r24, Y+7	; 0x07
 1d4:	98 85       	ldd	r25, Y+8	; 0x08
 1d6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__gesf2>
 1da:	18 16       	cp	r1, r24
 1dc:	4c f5       	brge	.+82     	; 0x230 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e2       	ldi	r20, 0x20	; 32
 1e4:	51 e4       	ldi	r21, 0x41	; 65
 1e6:	69 81       	ldd	r22, Y+1	; 0x01
 1e8:	7a 81       	ldd	r23, Y+2	; 0x02
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	9c 81       	ldd	r25, Y+4	; 0x04
 1ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__mulsf3>
 1f2:	dc 01       	movw	r26, r24
 1f4:	cb 01       	movw	r24, r22
 1f6:	bc 01       	movw	r22, r24
 1f8:	cd 01       	movw	r24, r26
 1fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__fixunssfsi>
 1fe:	dc 01       	movw	r26, r24
 200:	cb 01       	movw	r24, r22
 202:	9a 87       	std	Y+10, r25	; 0x0a
 204:	89 87       	std	Y+9, r24	; 0x09
 206:	0f c0       	rjmp	.+30     	; 0x226 <main+0x140>
 208:	80 e9       	ldi	r24, 0x90	; 144
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9c 87       	std	Y+12, r25	; 0x0c
 20e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 210:	8b 85       	ldd	r24, Y+11	; 0x0b
 212:	9c 85       	ldd	r25, Y+12	; 0x0c
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x12e>
 218:	9c 87       	std	Y+12, r25	; 0x0c
 21a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21c:	89 85       	ldd	r24, Y+9	; 0x09
 21e:	9a 85       	ldd	r25, Y+10	; 0x0a
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	9a 87       	std	Y+10, r25	; 0x0a
 224:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	89 85       	ldd	r24, Y+9	; 0x09
 228:	9a 85       	ldd	r25, Y+10	; 0x0a
 22a:	89 2b       	or	r24, r25
 22c:	69 f7       	brne	.-38     	; 0x208 <main+0x122>
 22e:	29 c0       	rjmp	.+82     	; 0x282 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 230:	6d 81       	ldd	r22, Y+5	; 0x05
 232:	7e 81       	ldd	r23, Y+6	; 0x06
 234:	8f 81       	ldd	r24, Y+7	; 0x07
 236:	98 85       	ldd	r25, Y+8	; 0x08
 238:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__fixunssfsi>
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	9a 87       	std	Y+10, r25	; 0x0a
 242:	89 87       	std	Y+9, r24	; 0x09
 244:	89 85       	ldd	r24, Y+9	; 0x09
 246:	9a 85       	ldd	r25, Y+10	; 0x0a
 248:	9e 87       	std	Y+14, r25	; 0x0e
 24a:	8d 87       	std	Y+13, r24	; 0x0d
 24c:	8d 85       	ldd	r24, Y+13	; 0x0d
 24e:	9e 85       	ldd	r25, Y+14	; 0x0e
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x16a>
 254:	9e 87       	std	Y+14, r25	; 0x0e
 256:	8d 87       	std	Y+13, r24	; 0x0d
 258:	14 c0       	rjmp	.+40     	; 0x282 <main+0x19c>
			_delay_ms(50); 
		}
		else // if the system is inactive
		{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN); // set the sleep mode
 25a:	83 e5       	ldi	r24, 0x53	; 83
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	23 e5       	ldi	r18, 0x53	; 83
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	20 81       	ld	r18, Z
 266:	21 7f       	andi	r18, 0xF1	; 241
 268:	24 60       	ori	r18, 0x04	; 4
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
			sleep_enable(); // enable sleep mode
 26e:	83 e5       	ldi	r24, 0x53	; 83
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	23 e5       	ldi	r18, 0x53	; 83
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	21 60       	ori	r18, 0x01	; 1
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
			sleep_cpu(); // enter sleep mode
 280:	88 95       	sleep
		}

		if (!(PINB & (1 << PINB4))) // check if the stop-button is pressed
 282:	83 e2       	ldi	r24, 0x23	; 35
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 71       	andi	r24, 0x10	; 16
 290:	99 27       	eor	r25, r25
 292:	89 2b       	or	r24, r25
 294:	09 f0       	breq	.+2      	; 0x298 <main+0x1b2>
 296:	5f cf       	rjmp	.-322    	; 0x156 <main+0x70>
		{
			system_active = 0; // set the system as inactive
 298:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
 29c:	5c cf       	rjmp	.-328    	; 0x156 <main+0x70>

0000029e <__cmpsf2>:
 29e:	0e 94 83 01 	call	0x306	; 0x306 <__fp_cmp>
 2a2:	08 f4       	brcc	.+2      	; 0x2a6 <__cmpsf2+0x8>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	08 95       	ret

000002a8 <__fixunssfsi>:
 2a8:	0e 94 af 01 	call	0x35e	; 0x35e <__fp_splitA>
 2ac:	88 f0       	brcs	.+34     	; 0x2d0 <__fixunssfsi+0x28>
 2ae:	9f 57       	subi	r25, 0x7F	; 127
 2b0:	98 f0       	brcs	.+38     	; 0x2d8 <__fixunssfsi+0x30>
 2b2:	b9 2f       	mov	r27, r25
 2b4:	99 27       	eor	r25, r25
 2b6:	b7 51       	subi	r27, 0x17	; 23
 2b8:	b0 f0       	brcs	.+44     	; 0x2e6 <__fixunssfsi+0x3e>
 2ba:	e1 f0       	breq	.+56     	; 0x2f4 <__fixunssfsi+0x4c>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	1a f0       	brmi	.+6      	; 0x2cc <__fixunssfsi+0x24>
 2c6:	ba 95       	dec	r27
 2c8:	c9 f7       	brne	.-14     	; 0x2bc <__fixunssfsi+0x14>
 2ca:	14 c0       	rjmp	.+40     	; 0x2f4 <__fixunssfsi+0x4c>
 2cc:	b1 30       	cpi	r27, 0x01	; 1
 2ce:	91 f0       	breq	.+36     	; 0x2f4 <__fixunssfsi+0x4c>
 2d0:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_zero>
 2d4:	b1 e0       	ldi	r27, 0x01	; 1
 2d6:	08 95       	ret
 2d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_zero>
 2dc:	67 2f       	mov	r22, r23
 2de:	78 2f       	mov	r23, r24
 2e0:	88 27       	eor	r24, r24
 2e2:	b8 5f       	subi	r27, 0xF8	; 248
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <__fixunssfsi+0x4c>
 2e6:	b9 3f       	cpi	r27, 0xF9	; 249
 2e8:	cc f3       	brlt	.-14     	; 0x2dc <__fixunssfsi+0x34>
 2ea:	86 95       	lsr	r24
 2ec:	77 95       	ror	r23
 2ee:	67 95       	ror	r22
 2f0:	b3 95       	inc	r27
 2f2:	d9 f7       	brne	.-10     	; 0x2ea <__fixunssfsi+0x42>
 2f4:	3e f4       	brtc	.+14     	; 0x304 <__fixunssfsi+0x5c>
 2f6:	90 95       	com	r25
 2f8:	80 95       	com	r24
 2fa:	70 95       	com	r23
 2fc:	61 95       	neg	r22
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	8f 4f       	sbci	r24, 0xFF	; 255
 302:	9f 4f       	sbci	r25, 0xFF	; 255
 304:	08 95       	ret

00000306 <__fp_cmp>:
 306:	99 0f       	add	r25, r25
 308:	00 08       	sbc	r0, r0
 30a:	55 0f       	add	r21, r21
 30c:	aa 0b       	sbc	r26, r26
 30e:	e0 e8       	ldi	r30, 0x80	; 128
 310:	fe ef       	ldi	r31, 0xFE	; 254
 312:	16 16       	cp	r1, r22
 314:	17 06       	cpc	r1, r23
 316:	e8 07       	cpc	r30, r24
 318:	f9 07       	cpc	r31, r25
 31a:	c0 f0       	brcs	.+48     	; 0x34c <__fp_cmp+0x46>
 31c:	12 16       	cp	r1, r18
 31e:	13 06       	cpc	r1, r19
 320:	e4 07       	cpc	r30, r20
 322:	f5 07       	cpc	r31, r21
 324:	98 f0       	brcs	.+38     	; 0x34c <__fp_cmp+0x46>
 326:	62 1b       	sub	r22, r18
 328:	73 0b       	sbc	r23, r19
 32a:	84 0b       	sbc	r24, r20
 32c:	95 0b       	sbc	r25, r21
 32e:	39 f4       	brne	.+14     	; 0x33e <__fp_cmp+0x38>
 330:	0a 26       	eor	r0, r26
 332:	61 f0       	breq	.+24     	; 0x34c <__fp_cmp+0x46>
 334:	23 2b       	or	r18, r19
 336:	24 2b       	or	r18, r20
 338:	25 2b       	or	r18, r21
 33a:	21 f4       	brne	.+8      	; 0x344 <__fp_cmp+0x3e>
 33c:	08 95       	ret
 33e:	0a 26       	eor	r0, r26
 340:	09 f4       	brne	.+2      	; 0x344 <__fp_cmp+0x3e>
 342:	a1 40       	sbci	r26, 0x01	; 1
 344:	a6 95       	lsr	r26
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	81 1d       	adc	r24, r1
 34a:	81 1d       	adc	r24, r1
 34c:	08 95       	ret

0000034e <__fp_split3>:
 34e:	57 fd       	sbrc	r21, 7
 350:	90 58       	subi	r25, 0x80	; 128
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	59 f0       	breq	.+22     	; 0x36e <__fp_splitA+0x10>
 358:	5f 3f       	cpi	r21, 0xFF	; 255
 35a:	71 f0       	breq	.+28     	; 0x378 <__fp_splitA+0x1a>
 35c:	47 95       	ror	r20

0000035e <__fp_splitA>:
 35e:	88 0f       	add	r24, r24
 360:	97 fb       	bst	r25, 7
 362:	99 1f       	adc	r25, r25
 364:	61 f0       	breq	.+24     	; 0x37e <__fp_splitA+0x20>
 366:	9f 3f       	cpi	r25, 0xFF	; 255
 368:	79 f0       	breq	.+30     	; 0x388 <__fp_splitA+0x2a>
 36a:	87 95       	ror	r24
 36c:	08 95       	ret
 36e:	12 16       	cp	r1, r18
 370:	13 06       	cpc	r1, r19
 372:	14 06       	cpc	r1, r20
 374:	55 1f       	adc	r21, r21
 376:	f2 cf       	rjmp	.-28     	; 0x35c <__fp_split3+0xe>
 378:	46 95       	lsr	r20
 37a:	f1 df       	rcall	.-30     	; 0x35e <__fp_splitA>
 37c:	08 c0       	rjmp	.+16     	; 0x38e <__fp_splitA+0x30>
 37e:	16 16       	cp	r1, r22
 380:	17 06       	cpc	r1, r23
 382:	18 06       	cpc	r1, r24
 384:	99 1f       	adc	r25, r25
 386:	f1 cf       	rjmp	.-30     	; 0x36a <__fp_splitA+0xc>
 388:	86 95       	lsr	r24
 38a:	71 05       	cpc	r23, r1
 38c:	61 05       	cpc	r22, r1
 38e:	08 94       	sec
 390:	08 95       	ret

00000392 <__fp_zero>:
 392:	e8 94       	clt

00000394 <__fp_szero>:
 394:	bb 27       	eor	r27, r27
 396:	66 27       	eor	r22, r22
 398:	77 27       	eor	r23, r23
 39a:	cb 01       	movw	r24, r22
 39c:	97 f9       	bld	r25, 7
 39e:	08 95       	ret

000003a0 <__gesf2>:
 3a0:	0e 94 83 01 	call	0x306	; 0x306 <__fp_cmp>
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <__gesf2+0x8>
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	08 95       	ret

000003aa <__mulsf3>:
 3aa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3x>
 3ae:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_round>
 3b2:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_pscA>
 3b6:	38 f0       	brcs	.+14     	; 0x3c6 <__mulsf3+0x1c>
 3b8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_pscB>
 3bc:	20 f0       	brcs	.+8      	; 0x3c6 <__mulsf3+0x1c>
 3be:	95 23       	and	r25, r21
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <__mulsf3+0x1c>
 3c2:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 3c6:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_nan>
 3ca:	11 24       	eor	r1, r1
 3cc:	0c 94 ca 01 	jmp	0x394	; 0x394 <__fp_szero>

000003d0 <__mulsf3x>:
 3d0:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_split3>
 3d4:	70 f3       	brcs	.-36     	; 0x3b2 <__mulsf3+0x8>

000003d6 <__mulsf3_pse>:
 3d6:	95 9f       	mul	r25, r21
 3d8:	c1 f3       	breq	.-16     	; 0x3ca <__mulsf3+0x20>
 3da:	95 0f       	add	r25, r21
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	55 1f       	adc	r21, r21
 3e0:	62 9f       	mul	r22, r18
 3e2:	f0 01       	movw	r30, r0
 3e4:	72 9f       	mul	r23, r18
 3e6:	bb 27       	eor	r27, r27
 3e8:	f0 0d       	add	r31, r0
 3ea:	b1 1d       	adc	r27, r1
 3ec:	63 9f       	mul	r22, r19
 3ee:	aa 27       	eor	r26, r26
 3f0:	f0 0d       	add	r31, r0
 3f2:	b1 1d       	adc	r27, r1
 3f4:	aa 1f       	adc	r26, r26
 3f6:	64 9f       	mul	r22, r20
 3f8:	66 27       	eor	r22, r22
 3fa:	b0 0d       	add	r27, r0
 3fc:	a1 1d       	adc	r26, r1
 3fe:	66 1f       	adc	r22, r22
 400:	82 9f       	mul	r24, r18
 402:	22 27       	eor	r18, r18
 404:	b0 0d       	add	r27, r0
 406:	a1 1d       	adc	r26, r1
 408:	62 1f       	adc	r22, r18
 40a:	73 9f       	mul	r23, r19
 40c:	b0 0d       	add	r27, r0
 40e:	a1 1d       	adc	r26, r1
 410:	62 1f       	adc	r22, r18
 412:	83 9f       	mul	r24, r19
 414:	a0 0d       	add	r26, r0
 416:	61 1d       	adc	r22, r1
 418:	22 1f       	adc	r18, r18
 41a:	74 9f       	mul	r23, r20
 41c:	33 27       	eor	r19, r19
 41e:	a0 0d       	add	r26, r0
 420:	61 1d       	adc	r22, r1
 422:	23 1f       	adc	r18, r19
 424:	84 9f       	mul	r24, r20
 426:	60 0d       	add	r22, r0
 428:	21 1d       	adc	r18, r1
 42a:	82 2f       	mov	r24, r18
 42c:	76 2f       	mov	r23, r22
 42e:	6a 2f       	mov	r22, r26
 430:	11 24       	eor	r1, r1
 432:	9f 57       	subi	r25, 0x7F	; 127
 434:	50 40       	sbci	r21, 0x00	; 0
 436:	9a f0       	brmi	.+38     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 438:	f1 f0       	breq	.+60     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 43a:	88 23       	and	r24, r24
 43c:	4a f0       	brmi	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	bb 1f       	adc	r27, r27
 444:	66 1f       	adc	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	50 40       	sbci	r21, 0x00	; 0
 44e:	a9 f7       	brne	.-22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	51 05       	cpc	r21, r1
 454:	80 f0       	brcs	.+32     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 456:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 45a:	0c 94 ca 01 	jmp	0x394	; 0x394 <__fp_szero>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	e4 f3       	brlt	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	98 3e       	cpi	r25, 0xE8	; 232
 464:	d4 f3       	brlt	.-12     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 466:	86 95       	lsr	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f7 95       	ror	r31
 470:	e7 95       	ror	r30
 472:	9f 5f       	subi	r25, 0xFF	; 255
 474:	c1 f7       	brne	.-16     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 476:	fe 2b       	or	r31, r30
 478:	88 0f       	add	r24, r24
 47a:	91 1d       	adc	r25, r1
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	97 f9       	bld	r25, 7
 482:	08 95       	ret

00000484 <__fp_inf>:
 484:	97 f9       	bld	r25, 7
 486:	9f 67       	ori	r25, 0x7F	; 127
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	08 95       	ret

00000490 <__fp_nan>:
 490:	9f ef       	ldi	r25, 0xFF	; 255
 492:	80 ec       	ldi	r24, 0xC0	; 192
 494:	08 95       	ret

00000496 <__fp_pscA>:
 496:	00 24       	eor	r0, r0
 498:	0a 94       	dec	r0
 49a:	16 16       	cp	r1, r22
 49c:	17 06       	cpc	r1, r23
 49e:	18 06       	cpc	r1, r24
 4a0:	09 06       	cpc	r0, r25
 4a2:	08 95       	ret

000004a4 <__fp_pscB>:
 4a4:	00 24       	eor	r0, r0
 4a6:	0a 94       	dec	r0
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	05 06       	cpc	r0, r21
 4b0:	08 95       	ret

000004b2 <__fp_round>:
 4b2:	09 2e       	mov	r0, r25
 4b4:	03 94       	inc	r0
 4b6:	00 0c       	add	r0, r0
 4b8:	11 f4       	brne	.+4      	; 0x4be <__fp_round+0xc>
 4ba:	88 23       	and	r24, r24
 4bc:	52 f0       	brmi	.+20     	; 0x4d2 <__fp_round+0x20>
 4be:	bb 0f       	add	r27, r27
 4c0:	40 f4       	brcc	.+16     	; 0x4d2 <__fp_round+0x20>
 4c2:	bf 2b       	or	r27, r31
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0x18>
 4c6:	60 ff       	sbrs	r22, 0
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__fp_round+0x20>
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
