
Harkka 10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  0000052e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000830  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c2  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 31       	cpi	r26, 0x15	; 21
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  88:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Init_update>:
	uint16_t interval;
	int8_t run;
}Task_list[TASK_MAX];

void Init_update(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	// timer 2
	TCCR2B |= (1<<CS21);				// normal mode, prescaler 8
  98:	81 eb       	ldi	r24, 0xB1	; 177
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	21 eb       	ldi	r18, 0xB1	; 177
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	22 60       	ori	r18, 0x02	; 2
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	TIMSK2 |= (1<<TOIE2);				// Timer overflow interrupt enable
  aa:	80 e7       	ldi	r24, 0x70	; 112
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	20 e7       	ldi	r18, 0x70	; 112
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	21 60       	ori	r18, 0x01	; 1
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	sei();	// enable interrupts;
  bc:	78 94       	sei
	
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <update>:
void update(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <update+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<TASK_MAX;i++) {					// check every task
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
  d4:	8f c0       	rjmp	.+286    	; 0x1f4 <update+0x12e>
		if(Task_list[i].task_number != 0) {		// not an empty slot
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	c9 01       	movw	r24, r18
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	82 0f       	add	r24, r18
  e2:	93 1f       	adc	r25, r19
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	8d 5f       	subi	r24, 0xFD	; 253
  ea:	9e 4f       	sbci	r25, 0xFE	; 254
  ec:	fc 01       	movw	r30, r24
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	09 f4       	brne	.+2      	; 0xf6 <update+0x30>
  f4:	7a c0       	rjmp	.+244    	; 0x1ea <update+0x124>
			if(Task_list[i].delay == 0) {	    // time to run
  f6:	29 81       	ldd	r18, Y+1	; 0x01
  f8:	3a 81       	ldd	r19, Y+2	; 0x02
  fa:	c9 01       	movw	r24, r18
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	82 0f       	add	r24, r18
 102:	93 1f       	adc	r25, r19
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	8c 5f       	subi	r24, 0xFC	; 252
 10a:	9e 4f       	sbci	r25, 0xFE	; 254
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	89 2b       	or	r24, r25
 114:	09 f0       	breq	.+2      	; 0x118 <update+0x52>
 116:	4a c0       	rjmp	.+148    	; 0x1ac <update+0xe6>
				Task_list[i].run += 1;          // please run this
 118:	29 81       	ldd	r18, Y+1	; 0x01
 11a:	3a 81       	ldd	r19, Y+2	; 0x02
 11c:	c9 01       	movw	r24, r18
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 5f       	subi	r24, 0xF8	; 248
 12c:	9e 4f       	sbci	r25, 0xFE	; 254
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	48 2f       	mov	r20, r24
 136:	29 81       	ldd	r18, Y+1	; 0x01
 138:	3a 81       	ldd	r19, Y+2	; 0x02
 13a:	c9 01       	movw	r24, r18
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 5f       	subi	r24, 0xF8	; 248
 14a:	9e 4f       	sbci	r25, 0xFE	; 254
 14c:	fc 01       	movw	r30, r24
 14e:	40 83       	st	Z, r20
				if(Task_list[i].interval != 0)  // periodic task
 150:	29 81       	ldd	r18, Y+1	; 0x01
 152:	3a 81       	ldd	r19, Y+2	; 0x02
 154:	c9 01       	movw	r24, r18
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	82 0f       	add	r24, r18
 15c:	93 1f       	adc	r25, r19
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	8a 5f       	subi	r24, 0xFA	; 250
 164:	9e 4f       	sbci	r25, 0xFE	; 254
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	89 2b       	or	r24, r25
 16e:	e9 f1       	breq	.+122    	; 0x1ea <update+0x124>
				Task_list[i].delay = Task_list[i].interval;
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	c9 01       	movw	r24, r18
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	8a 5f       	subi	r24, 0xFA	; 250
 184:	9e 4f       	sbci	r25, 0xFE	; 254
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	ac 01       	movw	r20, r24
 18e:	29 81       	ldd	r18, Y+1	; 0x01
 190:	3a 81       	ldd	r19, Y+2	; 0x02
 192:	c9 01       	movw	r24, r18
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	8c 5f       	subi	r24, 0xFC	; 252
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	fc 01       	movw	r30, r24
 1a6:	51 83       	std	Z+1, r21	; 0x01
 1a8:	40 83       	st	Z, r20
 1aa:	1f c0       	rjmp	.+62     	; 0x1ea <update+0x124>
			} else
			Task_list[i].delay -=1;			// decrement waiting time
 1ac:	29 81       	ldd	r18, Y+1	; 0x01
 1ae:	3a 81       	ldd	r19, Y+2	; 0x02
 1b0:	c9 01       	movw	r24, r18
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	8c 5f       	subi	r24, 0xFC	; 252
 1c0:	9e 4f       	sbci	r25, 0xFE	; 254
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	91 81       	ldd	r25, Z+1	; 0x01
 1c8:	ac 01       	movw	r20, r24
 1ca:	41 50       	subi	r20, 0x01	; 1
 1cc:	51 09       	sbc	r21, r1
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	c9 01       	movw	r24, r18
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	82 0f       	add	r24, r18
 1da:	93 1f       	adc	r25, r19
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	8c 5f       	subi	r24, 0xFC	; 252
 1e2:	9e 4f       	sbci	r25, 0xFE	; 254
 1e4:	fc 01       	movw	r30, r24
 1e6:	51 83       	std	Z+1, r21	; 0x01
 1e8:	40 83       	st	Z, r20
	
}
void update(void)
{
	int i;
	for(i=0;i<TASK_MAX;i++) {					// check every task
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	9a 83       	std	Y+2, r25	; 0x02
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	03 97       	sbiw	r24, 0x03	; 3
 1fa:	0c f4       	brge	.+2      	; 0x1fe <update+0x138>
 1fc:	6c cf       	rjmp	.-296    	; 0xd6 <update+0x10>
				Task_list[i].delay = Task_list[i].interval;
			} else
			Task_list[i].delay -=1;			// decrement waiting time
		}
	}
}
 1fe:	00 00       	nop
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <__vector_9>:

#define OVF_MAX 49	// 49 gives 10 ms tick.
uint16_t overflows=0;
ISR (TIMER2_OVF_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
	if(overflows++ >= OVF_MAX) {
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23e:	9c 01       	movw	r18, r24
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 248:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	c1 97       	sbiw	r24, 0x31	; 49
 24e:	30 f0       	brcs	.+12     	; 0x25c <__vector_9+0x52>
		update();
 250:	0e 94 63 00 	call	0xc6	; 0xc6 <update>
		overflows = 0;
 254:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 258:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 25c:	00 00       	nop
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <Add_task>:

void Add_task(uint8_t number, uint8_t task_number, int16_t delay, int16_t interval)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <Add_task+0x6>
 28c:	00 d0       	rcall	.+0      	; 0x28e <Add_task+0x8>
 28e:	00 d0       	rcall	.+0      	; 0x290 <Add_task+0xa>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	6a 83       	std	Y+2, r22	; 0x02
 298:	5c 83       	std	Y+4, r21	; 0x04
 29a:	4b 83       	std	Y+3, r20	; 0x03
 29c:	3e 83       	std	Y+6, r19	; 0x06
 29e:	2d 83       	std	Y+5, r18	; 0x05
	Task_list[number].task_number = task_number;
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	c9 01       	movw	r24, r18
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	8d 5f       	subi	r24, 0xFD	; 253
 2b6:	9e 4f       	sbci	r25, 0xFE	; 254
 2b8:	2a 81       	ldd	r18, Y+2	; 0x02
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
	Task_list[number].delay= delay;
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	c9 01       	movw	r24, r18
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	8c 5f       	subi	r24, 0xFC	; 252
 2d4:	9e 4f       	sbci	r25, 0xFE	; 254
 2d6:	2b 81       	ldd	r18, Y+3	; 0x03
 2d8:	3c 81       	ldd	r19, Y+4	; 0x04
 2da:	fc 01       	movw	r30, r24
 2dc:	31 83       	std	Z+1, r19	; 0x01
 2de:	20 83       	st	Z, r18
	Task_list[number].interval=interval;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	4d 81       	ldd	r20, Y+5	; 0x05
 2e8:	5e 81       	ldd	r21, Y+6	; 0x06
 2ea:	c9 01       	movw	r24, r18
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	82 0f       	add	r24, r18
 2f2:	93 1f       	adc	r25, r19
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	8a 5f       	subi	r24, 0xFA	; 250
 2fa:	9e 4f       	sbci	r25, 0xFE	; 254
 2fc:	fc 01       	movw	r30, r24
 2fe:	51 83       	std	Z+1, r21	; 0x01
 300:	40 83       	st	Z, r20
}
 302:	00 00       	nop
 304:	26 96       	adiw	r28, 0x06	; 6
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <Task_1>:
// here you can define your own tasks
#define TASK_1 1

uint8_t a = 0;
void Task_1(void)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	// Toggle the state of pin 13 (PB5) to turn the LED on/off
	a++;
 31e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <a>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <a>
	if(a&0x01)
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <a>
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	81 70       	andi	r24, 0x01	; 1
 332:	99 27       	eor	r25, r25
 334:	89 2b       	or	r24, r25
 336:	51 f0       	breq	.+20     	; 0x34c <Task_1+0x36>
	PORTB |= 0x01;
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	25 e2       	ldi	r18, 0x25	; 37
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	21 60       	ori	r18, 0x01	; 1
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
	else
	PORTB &= 0xFE;
}
 34a:	09 c0       	rjmp	.+18     	; 0x35e <Task_1+0x48>
	// Toggle the state of pin 13 (PB5) to turn the LED on/off
	a++;
	if(a&0x01)
	PORTB |= 0x01;
	else
	PORTB &= 0xFE;
 34c:	85 e2       	ldi	r24, 0x25	; 37
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	25 e2       	ldi	r18, 0x25	; 37
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	20 81       	ld	r18, Z
 358:	2e 7f       	andi	r18, 0xFE	; 254
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
}
 35e:	00 00       	nop
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <Init_tasks>:


void Init_tasks()
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	00 d0       	rcall	.+0      	; 0x36c <Init_tasks+0x6>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
	int i;
	DDRB=0xff;
 370:	84 e2       	ldi	r24, 0x24	; 36
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
	DDRB |= (1 << 5);
 37a:	84 e2       	ldi	r24, 0x24	; 36
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	24 e2       	ldi	r18, 0x24	; 36
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	20 62       	ori	r18, 0x20	; 32
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
	for(i=0;i<TASK_MAX;i++)
 38c:	1a 82       	std	Y+2, r1	; 0x02
 38e:	19 82       	std	Y+1, r1	; 0x01
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <Init_tasks+0x50>
	Task_list[i].task_number = 0;	// empty slots
 392:	29 81       	ldd	r18, Y+1	; 0x01
 394:	3a 81       	ldd	r19, Y+2	; 0x02
 396:	c9 01       	movw	r24, r18
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	82 0f       	add	r24, r18
 39e:	93 1f       	adc	r25, r19
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	8d 5f       	subi	r24, 0xFD	; 253
 3a6:	9e 4f       	sbci	r25, 0xFE	; 254
 3a8:	fc 01       	movw	r30, r24
 3aa:	10 82       	st	Z, r1
void Init_tasks()
{
	int i;
	DDRB=0xff;
	DDRB |= (1 << 5);
	for(i=0;i<TASK_MAX;i++)
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	9a 83       	std	Y+2, r25	; 0x02
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	03 97       	sbiw	r24, 0x03	; 3
 3bc:	54 f3       	brlt	.-44     	; 0x392 <Init_tasks+0x2c>
	Task_list[i].task_number = 0;	// empty slots
	
	Add_task(0, TASK_1, 1, 49); // Start task 1 after 1 ticks
 3be:	21 e3       	ldi	r18, 0x31	; 49
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 43 01 	call	0x286	; 0x286 <Add_task>
								// and then every second
}
 3ce:	00 00       	nop
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <dispatcher>:


void dispatcher()
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <dispatcher+0x6>
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<TASK_MAX;i++) {                // check every task
 3e4:	1a 82       	std	Y+2, r1	; 0x02
 3e6:	19 82       	std	Y+1, r1	; 0x01
 3e8:	50 c0       	rjmp	.+160    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		if(Task_list[i].task_number != 0) {  // not an empty slot
 3ea:	29 81       	ldd	r18, Y+1	; 0x01
 3ec:	3a 81       	ldd	r19, Y+2	; 0x02
 3ee:	c9 01       	movw	r24, r18
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	8d 5f       	subi	r24, 0xFD	; 253
 3fe:	9e 4f       	sbci	r25, 0xFE	; 254
 400:	fc 01       	movw	r30, r24
 402:	80 81       	ld	r24, Z
 404:	88 23       	and	r24, r24
 406:	e1 f1       	breq	.+120    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			if(Task_list[i].run > 0) {	     // time to run
 408:	29 81       	ldd	r18, Y+1	; 0x01
 40a:	3a 81       	ldd	r19, Y+2	; 0x02
 40c:	c9 01       	movw	r24, r18
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	82 0f       	add	r24, r18
 414:	93 1f       	adc	r25, r19
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 5f       	subi	r24, 0xF8	; 248
 41c:	9e 4f       	sbci	r25, 0xFE	; 254
 41e:	fc 01       	movw	r30, r24
 420:	80 81       	ld	r24, Z
 422:	18 16       	cp	r1, r24
 424:	6c f5       	brge	.+90     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				// Call the task function. This can be done more elegantly using function pointers
				if(Task_list[i].task_number == TASK_1) Task_1();
 426:	29 81       	ldd	r18, Y+1	; 0x01
 428:	3a 81       	ldd	r19, Y+2	; 0x02
 42a:	c9 01       	movw	r24, r18
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	82 0f       	add	r24, r18
 432:	93 1f       	adc	r25, r19
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	8d 5f       	subi	r24, 0xFD	; 253
 43a:	9e 4f       	sbci	r25, 0xFE	; 254
 43c:	fc 01       	movw	r30, r24
 43e:	80 81       	ld	r24, Z
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	11 f4       	brne	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	0e 94 8b 01 	call	0x316	; 0x316 <Task_1>
				Task_list[i].run -= 1;      // decrease run request
 448:	29 81       	ldd	r18, Y+1	; 0x01
 44a:	3a 81       	ldd	r19, Y+2	; 0x02
 44c:	c9 01       	movw	r24, r18
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	82 0f       	add	r24, r18
 454:	93 1f       	adc	r25, r19
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	88 5f       	subi	r24, 0xF8	; 248
 45c:	9e 4f       	sbci	r25, 0xFE	; 254
 45e:	fc 01       	movw	r30, r24
 460:	80 81       	ld	r24, Z
 462:	81 50       	subi	r24, 0x01	; 1
 464:	48 2f       	mov	r20, r24
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	3a 81       	ldd	r19, Y+2	; 0x02
 46a:	c9 01       	movw	r24, r18
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	82 0f       	add	r24, r18
 472:	93 1f       	adc	r25, r19
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 5f       	subi	r24, 0xF8	; 248
 47a:	9e 4f       	sbci	r25, 0xFE	; 254
 47c:	fc 01       	movw	r30, r24
 47e:	40 83       	st	Z, r20


void dispatcher()
{
	int i;
	for(i=0;i<TASK_MAX;i++) {                // check every task
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	9a 81       	ldd	r25, Y+2	; 0x02
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	9a 83       	std	Y+2, r25	; 0x02
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	03 97       	sbiw	r24, 0x03	; 3
 490:	0c f4       	brge	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 492:	ab cf       	rjmp	.-170    	; 0x3ea <dispatcher+0x10>
				if(Task_list[i].task_number == TASK_1) Task_1();
				Task_list[i].run -= 1;      // decrease run request
			}
		}
	}
}
 494:	00 00       	nop
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <main>:


int main(void)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
	Init_tasks();	// create 3 tasks
 4a8:	0e 94 b3 01 	call	0x366	; 0x366 <Init_tasks>
	Init_update();	// start timer and enable OVF interrupt
 4ac:	0e 94 48 00 	call	0x90	; 0x90 <Init_update>
	while (1)
	{
		dispatcher();	// run tasks that are ready for execution
 4b0:	0e 94 ed 01 	call	0x3da	; 0x3da <dispatcher>
		sleep_cpu(); // SLEEP-instruction
		// entry-point after wake-up
		sleep_disable(); // reset SE-bit
		sei(); // enable interrupts
		#endif
	}
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <main+0x10>

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
