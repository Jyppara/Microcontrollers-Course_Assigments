
week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cc  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000629  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001db  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <aritmethic>:

#include <avr/io.h>



void aritmethic(short int loops){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <aritmethic+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <aritmethic+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <aritmethic+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9e 83       	std	Y+6, r25	; 0x06
  90:	8d 83       	std	Y+5, r24	; 0x05
	
	for(short int i = 0 ; i < loops; i++){
  92:	1a 82       	std	Y+2, r1	; 0x02
  94:	19 82       	std	Y+1, r1	; 0x01
  96:	1d c0       	rjmp	.+58     	; 0xd2 <aritmethic+0x52>
		
		short int j = 10 * 100;
  98:	88 ee       	ldi	r24, 0xE8	; 232
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	9c 83       	std	Y+4, r25	; 0x04
  9e:	8b 83       	std	Y+3, r24	; 0x03
		j = j/ 50;
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	9c 81       	ldd	r25, Y+4	; 0x04
  a4:	22 e3       	ldi	r18, 0x32	; 50
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	0e 94 83 00 	call	0x106	; 0x106 <__divmodhi4>
  ae:	cb 01       	movw	r24, r22
  b0:	9c 83       	std	Y+4, r25	; 0x04
  b2:	8b 83       	std	Y+3, r24	; 0x03
		j = j - 3;
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	9c 81       	ldd	r25, Y+4	; 0x04
  b8:	03 97       	sbiw	r24, 0x03	; 3
  ba:	9c 83       	std	Y+4, r25	; 0x04
  bc:	8b 83       	std	Y+3, r24	; 0x03
		j += 1;
  be:	8b 81       	ldd	r24, Y+3	; 0x03
  c0:	9c 81       	ldd	r25, Y+4	; 0x04
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	9c 83       	std	Y+4, r25	; 0x04
  c6:	8b 83       	std	Y+3, r24	; 0x03



void aritmethic(short int loops){
	
	for(short int i = 0 ; i < loops; i++){
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	3a 81       	ldd	r19, Y+2	; 0x02
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	9e 81       	ldd	r25, Y+6	; 0x06
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	e4 f2       	brlt	.-72     	; 0x98 <aritmethic+0x18>
		j = j/ 50;
		j = j - 3;
		j += 1;
	}
	
}
  e0:	00 00       	nop
  e2:	26 96       	adiw	r28, 0x06	; 6
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <main>:
		

int main(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	
    while (1) 
    {
		aritmethic(1000);
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 40 00 	call	0x80	; 0x80 <aritmethic>
    }
 104:	fb cf       	rjmp	.-10     	; 0xfc <main+0x8>

00000106 <__divmodhi4>:
 106:	97 fb       	bst	r25, 7
 108:	07 2e       	mov	r0, r23
 10a:	16 f4       	brtc	.+4      	; 0x110 <__divmodhi4+0xa>
 10c:	00 94       	com	r0
 10e:	07 d0       	rcall	.+14     	; 0x11e <__divmodhi4_neg1>
 110:	77 fd       	sbrc	r23, 7
 112:	09 d0       	rcall	.+18     	; 0x126 <__divmodhi4_neg2>
 114:	0e 94 97 00 	call	0x12e	; 0x12e <__udivmodhi4>
 118:	07 fc       	sbrc	r0, 7
 11a:	05 d0       	rcall	.+10     	; 0x126 <__divmodhi4_neg2>
 11c:	3e f4       	brtc	.+14     	; 0x12c <__divmodhi4_exit>

0000011e <__divmodhi4_neg1>:
 11e:	90 95       	com	r25
 120:	81 95       	neg	r24
 122:	9f 4f       	sbci	r25, 0xFF	; 255
 124:	08 95       	ret

00000126 <__divmodhi4_neg2>:
 126:	70 95       	com	r23
 128:	61 95       	neg	r22
 12a:	7f 4f       	sbci	r23, 0xFF	; 255

0000012c <__divmodhi4_exit>:
 12c:	08 95       	ret

0000012e <__udivmodhi4>:
 12e:	aa 1b       	sub	r26, r26
 130:	bb 1b       	sub	r27, r27
 132:	51 e1       	ldi	r21, 0x11	; 17
 134:	07 c0       	rjmp	.+14     	; 0x144 <__udivmodhi4_ep>

00000136 <__udivmodhi4_loop>:
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	a6 17       	cp	r26, r22
 13c:	b7 07       	cpc	r27, r23
 13e:	10 f0       	brcs	.+4      	; 0x144 <__udivmodhi4_ep>
 140:	a6 1b       	sub	r26, r22
 142:	b7 0b       	sbc	r27, r23

00000144 <__udivmodhi4_ep>:
 144:	88 1f       	adc	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	5a 95       	dec	r21
 14a:	a9 f7       	brne	.-22     	; 0x136 <__udivmodhi4_loop>
 14c:	80 95       	com	r24
 14e:	90 95       	com	r25
 150:	bc 01       	movw	r22, r24
 152:	cd 01       	movw	r24, r26
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
