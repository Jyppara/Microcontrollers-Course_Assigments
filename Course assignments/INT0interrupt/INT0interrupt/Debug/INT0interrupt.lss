
INT0interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000625  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000223  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:

#include <avr/io.h>
#include <avr/interrupt.h>


ISR(INT0_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	ef 93       	push	r30
  98:	ff 93       	push	r31
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	
	PORTB = (PINB & 0b00001111) | (PINB << 4);
  a2:	85 e2       	ldi	r24, 0x25	; 37
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	23 e2       	ldi	r18, 0x23	; 35
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	42 2f       	mov	r20, r18
  b0:	4f 70       	andi	r20, 0x0F	; 15
  b2:	23 e2       	ldi	r18, 0x23	; 35
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	22 2f       	mov	r18, r18
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	22 95       	swap	r18
  c0:	32 95       	swap	r19
  c2:	30 7f       	andi	r19, 0xF0	; 240
  c4:	32 27       	eor	r19, r18
  c6:	20 7f       	andi	r18, 0xF0	; 240
  c8:	32 27       	eor	r19, r18
  ca:	24 2b       	or	r18, r20
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	
}
  d0:	00 00       	nop
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
    
	EIMSK = 0b00000001; // set INT0 to one
  fa:	8d e3       	ldi	r24, 0x3D	; 61
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	EICRA =  0b000000010; // The rising edge of INT0 generates an interrupt request
 104:	89 e6       	ldi	r24, 0x69	; 105
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	DDRB = 0b11110000; // pins 4-7 as outputs
 10e:	84 e2       	ldi	r24, 0x24	; 36
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	20 ef       	ldi	r18, 0xF0	; 240
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
	PORTB = 0b00000000; // all pins to low
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	10 82       	st	Z, r1
	PCICR = 0b00000100; // enable PCINT23...16 to cause an interrupt
 120:	88 e6       	ldi	r24, 0x68	; 104
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	24 e0       	ldi	r18, 0x04	; 4
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	sei();	// enable global interrupts
 12a:	78 94       	sei

	
    while (1) 
    {
		int a = 0;
 12c:	1a 82       	std	Y+2, r1	; 0x02
 12e:	19 82       	std	Y+1, r1	; 0x01
    }
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x3c>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
