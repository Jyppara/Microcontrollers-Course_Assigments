
Harkka7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f0  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022d  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_16>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8e:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_timer>:
#include <avr/io.h>
#include <stdio.h>
#include <string.h>
#include <avr/interrupt.h>

void init_timer(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	TCCR0B |= (1 << CS00); // No prescaling
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	25 e4       	ldi	r18, 0x45	; 69
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	21 60       	ori	r18, 0x01	; 1
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	TIMSK0 |= (1 << TOIE0); // Overflow interrupt enable
  b0:	8e e6       	ldi	r24, 0x6E	; 110
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2e e6       	ldi	r18, 0x6E	; 110
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	21 60       	ori	r18, 0x01	; 1
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
}
  c2:	00 00       	nop
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <__vector_16>:

ISR(TIMER0_OVF_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	2a 97       	sbiw	r28, 0x0a	; 10
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
	char forDebug[] = "I'm here!";
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	dc 01       	movw	r26, r24
  fe:	01 90       	ld	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	2a 95       	dec	r18
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_16+0x34>
}
 106:	00 00       	nop
 108:	2a 96       	adiw	r28, 0x0a	; 10
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <main>:

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	init_timer();	// Initialize the timer
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <init_timer>
	
	sei();			// Enable interrupts
 140:	78 94       	sei
	
    while (1) 
    {
		int useless = 0;
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
    }
 146:	fd cf       	rjmp	.-6      	; 0x142 <main+0x10>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
